<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textbox_bg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enum define

enum textboxType {
    plain = 0,
    yesno = 1,
    option = 2
}

enum textboxPortrait {
    none = 0,
    left = 1,
    right = 2,
    center = 3
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation

image_index = spr_textbox_bg;

font = fnt_monospaced;
currentColor = c_white;
initialColor = currentColor;

text = "This is a long, multiline debug message. It should have a lot of words as to check on this text box's multiline capabilities. I wonder just how much text will fit into this text box; probably a lot.";
textArray = "";
textArray[0] = "";
currentText = 0;
currentCharacter = 0;

textbox_speed = 2;

type = textboxType.plain;
portraitType = textboxPortrait.right;
portrait = spr_example_portrait;
name = "Debug"; //if portrait, define name

//my sprite subimg tracker
mySubimg = 0;
myCounter = 0;

//portrait fade in
fadeAlpha = 0;
fadeMax = seconds(0.1);

//spacing
characterSpace = font_get_size(font) - 2;
lineSpace = font_get_size(font) + 14;
charsPerLine = 60; //guess, redefined in draw
startingPointOffsetX = 30;
startingPointOffsetY = 36;

//yesno
noScript = test_conversation;
yesSelected = true;

alarm[1] = 1; //break up text if needed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///runs after getting defined -- split string

initialColor = currentColor;

global.lastPortrait = portrait;
global.lastPortraitType = portraitType;

var curr = 0;
var numLines = ceil((sprite_get_height(image_index) - (startingPointOffsetY * 2)) / lineSpace);
var chars = numLines * charsPerLine;
chars -= 8; //test

var lastSpace = 0; //index of last space
var i = 0;
var startingPlace = 1;

while(startingPlace &lt; string_length(text))
{
    textArray[curr] = "";
    var lastLastSpace = lastSpace;
    for(i = startingPlace; i &lt; startingPlace + chars &amp;&amp; i &lt;= string_length(text); i++) //find last space
    {
        if (string_char_at(text, i) == " ")
        {
            lastSpace = i;
        }
    }
    
    if (i == string_length(text) + 1)
        lastSpace = string_length(text) + 1;
        
    textArray[curr] = substring(text, startingPlace, lastSpace - startingPlace);
    startingPlace = lastSpace + 1;

    curr += 1;
}

text = textArray[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increment current character

if (currentCharacter &lt;= string_length(text))
{
    currentCharacter += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///down

if (currentText == array_length_1d(textArray) - 1 &amp;&amp; currentCharacter &gt; string_length(text))
{
    if (type == textboxType.yesno)
    {
        yesSelected = !yesSelected;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///up

if (currentText == array_length_1d(textArray) - 1 &amp;&amp; currentCharacter &gt; string_length(text))
{
    if (type == textboxType.yesno)
    {
        yesSelected = !yesSelected;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Received A button

if (currentCharacter &lt;= string_length(text))
{
    alarm[0] = -1;
    currentCharacter = string_length(text) + 1;
}
else //textbox is done
{
    if (currentText &lt; array_length_1d(textArray) - 1) 
    {
        currentText += 1;
        text = textArray[currentText];
        currentCharacter = 0;
    }
    else if (type == textboxType.plain) //go to next conv item, and destroy
    {
        if (global.conversationIndex &lt; array_length_1d(global.conversation) - 1)
        {
            global.conversationIndex += 1;
            create_textbox_by_object(global.conversation[global.conversationIndex]);
        }
        else
        {
            if(global.convEndScript != -1)
                script_execute(global.convEndScript);
        }
        instance_destroy();
    }
    else if (type == textboxType.yesno)
    {
        if (yesSelected)
        {
            if (global.conversationIndex &lt; array_length_1d(global.conversation) - 1)
            {
                global.conversationIndex += 1;
                create_textbox_by_object(global.conversation[global.conversationIndex]);
            }
        }
        else
        {
            global.conversationLevel += 1;
            script_execute(noScript, global.conversationIndex);
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increment sprite indices and transparency lerp

myCounter = (myCounter + 1) % 24;
mySubimg = floor(myCounter / 2);

if (fadeAlpha &lt; fadeMax)
    fadeAlpha += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add to text

startingPointOffsetX = 30;
startingPointOffsetY = 36;

characterSpace = font_get_size(font) - 2;
lineSpace = font_get_size(font) + 14;

charsPerLine = floor((sprite_get_width(image_index) - (startingPointOffsetX * 2)) / characterSpace);

draw_set_font(font);
currentColor = initialColor;

draw_set_halign(fa_center);
draw_set_valign(fa_middle);

var topLeftX = x - sprite_get_xoffset(image_index);
var topLeftY = y - sprite_get_yoffset(image_index);

var textStartX = topLeftX + startingPointOffsetX;
var textStartY = topLeftY + startingPointOffsetY;

var currentLine = 0;

draw_sprite(image_index, 0, x, y);
var currentLineCharacter = 0;


//escape flags
var drawCharacter = true;
var nextDelay = textbox_speed;
var shakeEffect = false;
var shakeX = 0;
var shakeY = 0;

for (var i = 1; i &lt; currentCharacter; i++)
{
    draw_set_color(currentColor);  
    nextDelay = textbox_speed;
    drawCharacter = true;
    shakeX = 0;
    shakeY = 0;

    if (i &gt; 0 &amp;&amp; string_char_at(text, i - 1) == " " &amp;&amp; word_breaks_line(text, i, currentLineCharacter, charsPerLine)){
        currentLine += 1;
        currentLineCharacter = 0;
    }
    else if (string_char_at(text, i) == "^") //escape sequences
    {
        while(string_char_at(text, i) == "^")
        {
            i += 1;
            if (currentCharacter &lt;= i)
                currentCharacter += 1;
            if (string_digits(string_char_at(text, i)) != "") //add to delay
            {
                drawCharacter = false;
                nextDelay += real(string_char_at(text, i));
                i -= 1; //compensate for character skip after this block
            }
            else if (string_char_at(text, i) == "e") //change active effect
            {
                i += 1;
                if (currentCharacter &lt;= i)
                    currentCharacter += 1;
                
                if (string_char_at(text, i) == "n") //no effect
                {
                    shakeEffect = false;
                }
                else if (string_char_at(text, i) == "s") //shake effect
                {
                    shakeEffect = true;
                }
            }
            else if (string_char_at(text, i) == "c") //change color
            {
                i += 1;
                if (currentCharacter &lt;= i)
                    currentCharacter += 1;
            
                if (string_char_at(text, i) == "w")
                    currentColor = c_white;
                else if (string_char_at(text, i) == "b")
                    currentColor = c_blue;
            }
            
            draw_set_color(currentColor);
            i += 1; //skip the escaped character
            if (currentCharacter &lt;= i)
                currentCharacter += 1;
        }
       // show_message("Character about to display: " + string_char_at(text, i));
    }
    if (drawCharacter) {
        if (shakeEffect)
        {
            shakeX = irandom_range(-1, 1);
            shakeY = irandom_range(-1, 1);
        }
        draw_text(textStartX + (currentLineCharacter * characterSpace) + shakeX, textStartY + (currentLine * lineSpace) + shakeY, string_char_at(text, i));
        currentLineCharacter += 1;
    }
    
}

if (currentCharacter &lt;= string_length(text) &amp;&amp; alarm[0] &lt;= 0) //increment character
{
    alarm[0] = nextDelay;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Portrait Logic

var nameBgY = topLeftY - (sprite_get_height(spr_textbox_name_bg) / 2);
var nameBgX = 0;

var distanceMultiplier = 3;

if (portraitType == textboxPortrait.left)
{
    //name bg origin is centered
    //show_debug_message("trying to draw left portrait");
    nameBgX = topLeftX + (sprite_get_width(spr_textbox_name_bg) / 2);
    draw_sprite_ext(portrait, 0, nameBgX - ((distanceMultiplier * fadeMax) - (distanceMultiplier * fadeAlpha)), topLeftY, 1, 1, 0, c_white, fadeAlpha / fadeMax);
    draw_sprite(spr_textbox_name_bg, 0, nameBgX, nameBgY);
    draw_set_color(c_white);
    draw_text(nameBgX, nameBgY, name);
}
else if (portraitType == textboxPortrait.right)
{
    //show_debug_message("trying to draw right portrait");
    nameBgX = topLeftX + sprite_get_width(image_index) - (sprite_get_width(spr_textbox_name_bg) / 2);
    
    
    draw_sprite_ext(portrait, 0, nameBgX + ((distanceMultiplier * fadeMax) - (distanceMultiplier * fadeAlpha)), topLeftY, -1, 1, 0, c_white, fadeAlpha / fadeMax);
    draw_sprite(spr_textbox_name_bg, 0, nameBgX, nameBgY);
    draw_set_color(c_white);
    draw_text(nameBgX, nameBgY, name);
}
else if (portraitType == textboxPortrait.center)
{
    nameBgX = x;
    
    draw_sprite_ext(portrait, 0, nameBgX, topLeftY, 1, 1, 0, c_white, fadeAlpha / fadeMax);
    draw_sprite(spr_textbox_name_bg, 0, nameBgX, nameBgY);
    draw_set_color(c_white);
    draw_text(nameBgX, nameBgY, name);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Plain, Yesno, Options

if (currentCharacter &gt; string_length(text)) //print next arrow, yes/no, dialogue, etc
{
    if (type == textboxType.plain)
    {
        draw_sprite_ext(spr_textbox_next, mySubimg, x + sprite_get_xoffset(image_index) - (startingPointOffsetX * 1.5), y + sprite_get_yoffset(image_index) - (startingPointOffsetY * .5), 0.5, 0.5, 0, c_white, 0.75);
    }
    else if (type == textboxType.yesno) //draw yesno dialogue
    {
        if(portraitType != textboxPortrait.right)
            var yesnoX = topLeftX + sprite_get_width(image_index) - (sprite_get_width(spr_textbox_yesno_bg) / 2);
        else
            var yesnoX = topLeftX + (sprite_get_width(spr_textbox_yesno_bg) / 2);
        var yesnoY = topLeftY - (sprite_get_height(spr_textbox_yesno_bg) / 2);
        
        draw_sprite(spr_textbox_yesno_bg, 0, yesnoX, yesnoY);
        draw_set_color(c_white);
        
        draw_text(yesnoX, yesnoY - (lineSpace / 1.5), "Yes");
        draw_text(yesnoX, yesnoY + (lineSpace / 1.5), "No");
        
        if (yesSelected)
            draw_sprite(spr_textbox_yesno_highlight, 0, yesnoX, yesnoY - (lineSpace / 1.5));
        else
            draw_sprite(spr_textbox_yesno_highlight, 0, yesnoX, yesnoY + (lineSpace / 1.5));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
