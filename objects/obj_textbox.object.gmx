<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textbox_bg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enum define

enum textboxType {
    plain = 0,
    yesno = 1,
    option = 2
}

enum textboxPortrait {
    none = 0,
    left = 1,
    right = 2,
    center = 3
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation

image_index = spr_textbox_bg;

font = fnt_monospaced;
currentColor = c_white;

text = "This is a long, multiline debug message. It should have a lot of words as to check on this text box's multiline capabilities. I wonder just how much text will fit into this text box; probably a lot.";
currentCharacter = 0;

textbox_speed = 2;

type = textboxType.plain;
portrait = textboxPortrait.none;

//my sprite subimg tracker
mySubimg = 0;
myCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increment current character

if (currentCharacter &lt;= string_length(text))
{
    currentCharacter += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Received A button

if (currentCharacter &lt;= string_length(text))
{
    alarm[0] = -1;
    currentCharacter = string_length(text) + 1;
}
else
{
    if (type == textboxType.plain)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increment sprite indices

myCounter = (myCounter + 1) % 24;
mySubimg = floor(myCounter / 2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add to text

var startingPointOffsetX = 30;
var startingPointOffsetY = 36;



var characterSpace = font_get_size(font) - 2;
var lineSpace = font_get_size(font) + 14;

var charsPerLine = floor((sprite_get_width(image_index) - (startingPointOffsetX * 2)) / characterSpace);

draw_set_font(font);
draw_set_color(currentColor);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);

var topLeftX = x - sprite_get_xoffset(image_index);
var topLeftY = y - sprite_get_yoffset(image_index);

var textStartX = topLeftX + startingPointOffsetX;
var textStartY = topLeftY + startingPointOffsetY;

var currentLine = 0;

draw_sprite(image_index, 0, x, y);
var currentLineCharacter = 0;
for (var i = 1; i &lt; currentCharacter; i++)
{
    if (i &gt; 0 &amp;&amp; string_char_at(text, i - 1) == " " &amp;&amp; word_breaks_line(text, i, currentLineCharacter, charsPerLine)){
        currentLine += 1;
        currentLineCharacter = 0;
    }
    draw_text(textStartX + (currentLineCharacter * characterSpace), textStartY + (currentLine * lineSpace), string_char_at(text, i));
    currentLineCharacter += 1;
}

if (currentCharacter &lt;= string_length(text) &amp;&amp; alarm[0] &lt;= 0) //increment character
{
    alarm[0] = textbox_speed;
}

if (currentCharacter &gt; string_length(text)) //print next arrow, yes/no, dialogue, etc
{
    if (type == textboxType.plain)
    {
        draw_sprite_ext(spr_textbox_next, mySubimg, x + sprite_get_xoffset(image_index) - (startingPointOffsetX * 1.5), y + sprite_get_yoffset(image_index) - (startingPointOffsetY * .5), 0.5, 0.5, 0, c_white, 0.75);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
